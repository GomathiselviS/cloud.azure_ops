---
- name: Define resource group name
  ansible.builtin.set_fact:
    azure_resource_group: test-{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=16') }}
    tags:
      azure_ops: azure_manage_resource_group

- name: Test resource group role
  block:
    - name: Include azure_manage_resource_group role
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        operation: create
        azure_region: eastus

    - name: Check resource group
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ azure_resource_group }}"
      register: result

    - name: Assert that resource group exists
      ansible.builtin.assert:
        that:
          - result.resourcegroups | length == 1

    - name: Get lock info for the resource group
      azure.azcollection.azure_rm_lock_info:
        resource_group: "{{ azure_resource_group }}"
      register: result

    - name: Assert that resource is not locked
      ansible.builtin.assert:
        that:
          - result.locks | length == 0

    - name: Run the role once again and lock the resource group and add tags
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        operation: create
        azure_region: eastus
        azure_lock_resource_group: true

    - name: Get lock info for the resource group
      azure.azcollection.azure_rm_lock_info:
        resource_group: "{{ azure_resource_group }}"
      register: result

    - name: Assert that resource is not locked
      ansible.builtin.assert:
        that:
          - result.locks | length == 1

    - name: Trying to delete resource group locked should failed
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
        apply:
          ignore_errors: true
      vars:
        operation: delete

    - name: Check that resource group still exists
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ azure_resource_group }}"
      register: result

    - name: Assert that resource group exists
      ansible.builtin.assert:
        that:
          - result.resourcegroups | length == 1

    - name: Force locked resource group deletion
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        operation: delete
        azure_force_delete_locked: true

    - name: Assert resource group has been deleted
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ azure_resource_group }}"
      register: result

    - name: Assert that resource group exists
      ansible.builtin.assert:
        that:
          - result.resourcegroups | length == 0

  always:
    - name: Delete all resource using tags # noqa ignore-errors
      azure.azcollection.azure_rm_resourcegroup:
        name: "{{ azure_resource_group }}"
        state: absent
        force_delete_nonempty: true
      ignore_errors: true
