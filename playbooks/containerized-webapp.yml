- name: Deploy existing python app to an aks cluster on azure
  hosts: localhost
  gather_facts: no

  collections:
  - cloud.azure_roles
  - azure.azcollection

  vars_files:
  - vars/containerized-webapp.yml

  tasks:
  - name: Ensure resource group is defined
    fail:
      msg: "Azure Resource group must be defined as azure_resource_group"
    when: azure_resource_group is not defined

  - name: Ensure pgsql server name is defined
    fail:
      msg: 'Azure PostgreSQL server name must be defined as azure_postgresql_name'
    when: azure_postgresql_name is not defined

  - name: Ensure pgsql admin username is defined
    fail:
      msg: 'Azure PostgreSQL admin username must be defined as azure_postgresql_admin_username'
    when: azure_postgresql_admin_username is not defined

  - name: Ensure pgsql admin password is defined
    fail:
      msg: 'Azure PostgreSQL admin password must be defined as azure_postgresql_admin_password'
    when: azure_postgresql_admin_password is not defined

  - name: Get pgsql info
    azure_rm_postgresqlserver_info:
      resource_group: '{{ azure_resource_group }}'
      name: '{{ azure_postgresql_name }}'
    register: psql_info

  - name: Ensure PostgreSQL server exists
    fail:
      msg: 'No PostgreSQL instance found in resource group'
    when: psql_info.servers | length == 0

  - name: Create an azure container registry
    azure_rm_containerregistry:
      name: '{{ azure_container_registry }}'
      resource_group: '{{ azure_resource_group }}'
      admin_user_enabled: yes
    register: cr

  - name: Git clone application
    git:
      repo: "{{ azure_app.src_repo }}"
      dest: "{{ azure_app.src_dest }}"

  - name: Podman login to Azure container registry
    containers.podman.podman_login:
      registry: "{{ azure_container_registry }}.azurecr.io"
      username: "{{ azure_container_registry }}"
      password: "{{ cr.credentials.password }}"

  - name: Podman build and push image to Azure container registry
    containers.podman.podman_image:
      path: "{{ azure_app.src_dest }}"
      name: "{{ azure_container_registry }}.azurecr.io/{{ azure_app.docker_image }}:latest"
      push: yes

  - name: Create container group
    azure_rm_containerinstance:
      resource_group: '{{ azure_resource_group }}'
      name: '{{ azure_resource_group }}-container-group'
      force_update: yes
      os_type: linux
      ip_address: public
      registry_login_server: "{{ azure_container_registry }}.azurecr.io"
      registry_username: "{{ azure_container_registry }}"
      registry_password: "{{ cr.credentials.password }}"
      containers:
        - name: '{{ azure_app.container_name }}'
          image: '{{ azure_container_registry }}.azurecr.io/{{ azure_app.docker_image }}:latest'
          memory: 1
          volume_mounts:
            - name: src
              mount_path: "/mnt/src"
          ports:
            - 5000
          environment_variables:
            - name: FLASK_APP
              value: '{{ azure_app.docker_dir }}'
            - name: FLASK_ENV
              value: '{{ azure_app.env }}'
            - name: DATABASE_HOST
              value: '{{ azure_postgresql_name }}'
            - name: DATABASE_INSTANCE
              value: '{{ azure_postgresql_database_instances[0].name }}'
            - name: DATABASE_USER
              value: '{{ azure_postgresql_admin_username }}'
            - name: DATABASE_PASSWORD
              value: '{{ azure_postgresql_admin_password }}'
            - name: ADMIN_USER
              value: '{{ azure_app.admin_user }}'
            - name: ADMIN_PASSWORD
              value: '{{ azure_app.admin_password }}'
      volumes:
        - name: src
          git_repo:
            repository: "{{ azure_app.src_repo }}"
    register: app

  - name: Print application ip
    debug:
      msg: "Web application accessible at  http://{{ app.ip_address }}:5000"